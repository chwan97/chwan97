
/*
 * ! @chakra-ui/vue v0.11.0 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./index-068c5bef.js');
require('./chakra-ui-styled-system.esm-1a60142c.js');
require('@emotion/css');
require('vue');
require('./color-mode-observer-36841f0d.js');
var props_types = require('./props.types-1910f70e.js');

/**
 * Hey! Welcome to @chakra-ui/vue Link
 *
 * `CLink` is an accessible elements used primarily for navigation.
 *
 * @see Docs     https://vue.chakra-ui.com/link
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CLink/CLink.js
 */
/**
 * CLink component
 *
 * The anchor / router-link / nuxt-link element
 *
 * @extends CPseudoBox
 * @see Docs https://vue.chakra-ui.com/link
 */

var CLink = {
  name: 'CLink',
  mixins: [utils.createStyledAttrsMixin('CLink')],
  props: {
    as: {
      type: String,
      default: 'a'
    },
    to: props_types.SNA,
    isDisabled: Boolean,
    isExternal: Boolean
  },
  computed: {
    isRouterLink: function isRouterLink() {
      return ['router-link', 'nuxt-link'].includes(utils.kebabify(this.as));
    },
    componentStyles: function componentStyles() {
      return {
        transition: 'all 0.15s ease-out',
        cursor: 'pointer',
        textDecoration: 'none',
        outline: 'none',
        _focus: {
          boxShadow: 'outline'
        },
        _hover: {
          textDecoration: 'underline'
        },
        _disabled: {
          opacity: '0.4',
          cursor: 'not-allowed',
          textDecoration: 'none'
        }
      };
    },
    externalAttrs: function externalAttrs() {
      return this.isExternal ? {
        target: '_blank',
        rel: 'noopener noreferrer'
      } : null;
    }
  },
  render: function render(h) {
    var this$1 = this;
    return h(this.as, {
      class: this.className,
      props: Object.assign({}, this.isRouterLink && {
        to: this.to
      }),
      attrs: Object.assign({}, {
        tabindex: this.isDisabled ? -1 : undefined,
        'aria-disabled': this.isDisabled
      }, this.externalAttrs, this.computedAttrs),
      on: Object.assign({}, {
        click: function click(e) {
          return this$1.$emit('click', e);
        }
      }, this.computedListeners)
    }, this.$slots.default);
  }
};

exports.default = CLink;
