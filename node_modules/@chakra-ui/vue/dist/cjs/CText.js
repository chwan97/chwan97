
/*
 * ! @chakra-ui/vue v0.11.0 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./index-068c5bef.js');
require('./chakra-ui-styled-system.esm-1a60142c.js');
require('@emotion/css');
require('vue');
require('./color-mode-observer-36841f0d.js');
var text_utils = require('./text.utils-c15894c6.js');

/**
 * Hey! Welcome to @chakra-ui/vue Text
 *
 * Text is the used to render text and paragraphs within an interface. It renders a <p> tag by default.
 *
 * @see Docs     https://vue.chakra-ui.com/text
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CText/CText.js
 */
/**
 * CText component
 *
 * the text element component
 *
 * @see Docs https://vue.chakra-ui.com/text
 */

var CText = {
  name: 'CText',
  mixins: [utils.createStyledAttrsMixin('CText')],
  props: {
    as: {
      type: [String, Array],
      default: 'p'
    },
    isTruncated: Boolean,
    fontFamily: {
      type: [String, Array],
      default: 'body'
    }
  },
  computed: {
    componentStyles: function componentStyles() {
      return Object.assign({}, {
        fontFamily: this.as === 'kbd' ? 'mono' : this.fontFamily
      }, this.isTruncated && text_utils.useTruncated());
    }
  },
  render: function render(h) {
    return h(this.as, {
      class: this.className,
      attrs: this.computedAttrs
    }, this.$slots.default);
  }
};

exports.default = CText;
